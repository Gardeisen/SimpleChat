// This file contains material supporting section 3.7 of the textbook:// "Object Oriented Software Engineering" and is issued under the open-source// license found at www.lloseng.com package client;import ocsf.client.*;import common.*;import java.io.*;import java.util.Observable;import java.util.Observer;/** * This class overrides some of the methods defined in the abstract * superclass in order to give more functionality to the client. * * @author Dr Timothy C. Lethbridge * @author Dr Robert Lagani&egrave; * @author Fran&ccedil;ois B&eacute;langer * @version July 2000 */public class ChatClient implements Observer {	//Instance variables **********************************************	/**	 * The interface type variable.  It allows the implementation of 	 * the display method in the client.	 */	ChatIF clientUI; 	int id;		ObservableClient oc;	//Constructors ****************************************************	/**	 * Constructs an instance of the chat client.	 *	 * @param host The server to connect to.	 * @param port The port number to connect on.	 * @param clientUI The interface type variable.	 */	public ChatClient(int id, String host, int port, ChatIF clientUI) throws IOException {		this.clientUI = clientUI;		this.id = id;		this.oc = new ObservableClient(host,port);		oc.addObserver(this);		oc.openConnection();		oc.sendToServer("#login " + id);	}	//Instance methods ************************************************	/**	 * This method handles all data that comes in from the server.	 *	 * @param msg The message from the server.	 */	public void handleMessageFromServer(Object msg) {		String message = msg.toString();		if(message.startsWith("#")) {			this.handleServerCommand(message);		}		else {			clientUI.display(msg.toString());		}	}	/**	 * This method handles all data coming from the UI            	 *	 * @param message The message from the UI.    	 */	public void handleMessageFromClientUI(String message) {		if(message.startsWith("#")) {			this.handleCommand(message);		}		else {			try {				oc.sendToServer(message);			}			catch(IOException e) {				clientUI.display				("Could not send message to server.  Terminating client.");				quit();			}		}	}	private void handleCommand(String message) {		String[] tab = message.split(" ");		switch(tab[0]) {		case("#quit"):			if(this.oc.isConnected()) {				try {					oc.sendToServer("#logoff");					quit();				} catch (IOException e) {					e.printStackTrace();				}			}		break;		case("#logoff"):			if(this.oc.isConnected()) {				try {					oc.sendToServer("#logoff");					this.oc.closeConnection();				} catch (IOException e) {					e.printStackTrace();				}			}		break;		case("#sethost"):			if(!this.oc.isConnected()) {				if(tab.length > 1) {					String host = tab[1];					this.oc.setHost(host);					clientUI.display("New host is " + this.oc.getHost());				}				else {					clientUI.display("Missing host argument !");				}			}		break;		case("#setport"):			if(!this.oc.isConnected()) {				if(tab.length > 1) {					int port = Integer.parseInt(tab[1]);					this.oc.setPort(port);					clientUI.display("New port is " + this.oc.getPort());				}				else {					clientUI.display("Missing port argument !");				}			}		break;		case("#login"):			if(!this.oc.isConnected()) {				if(tab.length > 1) {					try {						this.oc.openConnection();						this.oc.sendToServer(message);						clientUI.display("Logged in to server !");					} catch (IOException e) {						e.printStackTrace();					}				}				else {					clientUI.display("Missing id argument !");				}			}			else {				clientUI.display("You are already logged in !");			}		break;		case("#gethost"):			clientUI.display(this.oc.getHost());		break;		case("#getport"):			clientUI.display(Integer.toString(this.oc.getPort()));		break;		default:			clientUI.display("Invalid command !");			break;		}	}	private void handleServerCommand(String message) {		String[] tab = message.split(" ");		switch(tab[0]) {		case("#quit"):			try {				this.oc.closeConnection();				clientUI.display("Server has quit");			} 			catch (IOException e) {				e.printStackTrace();			}			break;		case("#close"):			try {				this.oc.closeConnection();			} 			catch (IOException e) {				e.printStackTrace();			}			break;		default:			clientUI.display("Invalid command !");			break;		}	}		/**	 * This method terminates the client.	 */	public void quit() {		try {			oc.closeConnection();		}		catch(IOException e) {}		System.exit(0);	}	protected void connectionClosed() {		clientUI.display("The connection has been successfully closed.");	}	protected void connectionException(Exception exception) {		exception.printStackTrace();		clientUI.display("Connection to server lost.");		quit();	}		protected void connectionEstablished() {		clientUI.display("Connection successfully established.");	}	@Override	public void update(Observable o, Object arg) {		if(arg instanceof Exception) {			connectionException((Exception) arg); 		}		else if(arg.equals(ObservableClient.CONNECTION_CLOSED)) {			connectionClosed();		}		else if(arg.equals(ObservableClient.CONNECTION_ESTABLISHED)) {			connectionEstablished();		}		else {			handleMessageFromServer(arg);		}	}}//End of ChatClient class